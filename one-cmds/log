#!/usr/bin/env bash

set -o errexit -o nounset -o pipefail -o errtrace
(shopt -p inherit_errexit &>/dev/null) && shopt -s inherit_errexit

# one.bash:completion
if [[ ${1:-} == --complete ]]; then
	if ((COMP_CWORD < 3)); then
		printf -- '-a\n-f\n-n\n-e\n--help\n'
	fi

	exit 0
fi

if [[ -z ${ONE_DIR:-} ]]; then
	SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
	ONE_DIR=$SCRIPT_DIR/..
fi

# shellcheck source=../../bash/load-config.bash
. "$ONE_DIR/bash/load-config.bash"

# one.bash:usage
if [[ ${1:-} == -h ]] || [[ ${1:-} == --help ]]; then
	# editorconfig-checker-disable
	cat <<EOF
Usage: one log [OPTIONS]
Desc: Print the logs of one.bash

Options:
  -n [NUMBER=20]    tail -n \$NUMBER
  -f                Like tail -f. Not stop when end of file is reached, wait for appended lines to file.
  -a                Print all logs
  -e [\$EDITOR]     Open your default editor to read logs
  -h|--help         Show help

ONE_LOG_FILE: $ONE_LOG_FILE
EOF
	# editorconfig-checker-enable
	exit 0
fi

# shellcheck source=../deps/lobash.bash
. "$ONE_DIR/deps/lobash.bash"

declare -A opts=()
declare -a args=()
l.parse_params opts args "$@"

limit=${opts[n]:-20}

case ${1:-} in
	-e)
		"${2:-$EDITOR}" "$ONE_LOG_FILE"
		;;

	-a)
		if one_l.has command bat; then
			bat "$ONE_LOG_FILE"
		else
			cat "$ONE_LOG_FILE"
		fi
		;;

	-n)
		tail -n "$2" "$ONE_LOG_FILE"
		;;

	-f)
		tail -f -n "$limit" "$ONE_LOG_FILE"
		;;

	*)
		tail -n "$limit" "$ONE_LOG_FILE"
		;;
esac
