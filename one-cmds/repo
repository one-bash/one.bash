#!/usr/bin/env bash

set -o errexit -o nounset -o pipefail -o errtrace
(shopt -p inherit_errexit &>/dev/null) && shopt -s inherit_errexit

# one.bash:completion
if [[ "${1:-}" == --complete ]]; then
  actions=(init list)

  if (( COMP_CWORD < 3 )); then
    words=("${actions[@]}" -h --help)
    printf '%s\n' "${words[@]}"
  elif [[ $2 == -h ]] || [[ $2 == --help ]]; then
    printf '%s\n' "${actions[@]}"
  elif [[ $2 == init ]]; then
    result=$(compgen -f -- "$3")
    if [[ -d $result ]]; then
      compgen -f -- "$result/"
    else
      echo "${result[@]}"
    fi
  fi
  exit 0
fi

usage() {
  local cmd; cmd=$(basename "$0");
  cat <<EOF
Usage:  one $cmd [-h|--help] <ACTION>
        one $cmd [-h|--help]

Desc:   Manage one.bash repos

ACTION:
  l, list          List available repos
  init [<PATH>]    Scaffolding a repo in <PATH> (Defaults to \$PWD)
EOF
  exit 0
}

usage_init() {
  local cmd; cmd=$(basename "$0");
  cat <<EOF
Usage: one $cmd init [<PATH>]

Desc: Scaffolding a repo in <PATH> (Defaults to \$PWD)

Arguments:
  <PATH>  If <PATH> not passed, use current directory
EOF
  exit 0
}

usage_list() {
  local cmd; cmd=$(basename "$0");
  cat <<EOF
Usage: one $cmd list
Desc:  List available repos
EOF
  exit 0
}
usage_l() { usage_list; }


# one.bash:usage
if (( $# == 0 )); then
  usage;
elif [[ $1 == -h ]] || [[ $1 == --help ]]; then
  if (( $# > 1 )); then usage_"$2"; else usage; fi
elif [[ ${*: -1} == --help ]] ; then
  if (( $# > 1 )); then usage_"$1"; else usage; fi
fi

if [[ -z ${ONE_DIR:-} ]]; then
  SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
  readonly SCRIPT_DIR
  export ONE_DIR=$SCRIPT_DIR/..
fi

is_empty_dir() {
  [[ -z $(ls -A "${1:-}") ]]
}

init_repo() {
  local repo=${1:-$PWD}

  if [[ ${repo} == -h ]] || [[ ${repo} == --help ]]; then usage; fi

  if ! is_empty_dir "$repo"; then
    echo "Directory '$repo' is not empty" >&2
    return 1
  fi

  mkdir -p "$repo"
  cd "$repo"

  mkdir aliases bin completions configs deps plugins sub
  cat <<EOF > README.md
# ONE REPO

A repo for [one.bash](https://github.com/one-bash/one.bash).
EOF

  cat <<EOF > one.links.example.yaml
# It is just an example. All belows are unnecessary.
- defaults:
    link:
      # relink: true # If true, override the target file when it existed
      create: true

# NOTE: dotbot have no sudo permission
- shell: []

- link: []
EOF

  cd - > /dev/null
  echo "Created repo: $repo"
}

action=$1
shift

# shellcheck source=../../bash/load-config.bash
. "$ONE_DIR/bash/load-config.bash"

case "$action" in
  l|list) printf '%s\n' "${ONE_REPOS[@]}" ;;

  init) init_repo "$@" ;;

  *)
    echo "Invalid action '$action'" >&2
    exit 1
    ;;
esac
