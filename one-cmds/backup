#!/usr/bin/env bash

set -o errexit -o nounset -o pipefail -o errtrace
(shopt -p inherit_errexit &>/dev/null) && shopt -s inherit_errexit

# one.bash:completion
if [[ ${1:-} == --complete ]]; then
	if ((COMP_CWORD < 3)); then
		words=(-o -h --help)
		printf '%s\n' "${words[@]}"
	elif [[ $2 == -o ]]; then
		result=$(compgen -f -- "$3")
		if [[ -d $result ]]; then
			compgen -f -- "$result/"
		else
			echo "${result[@]}"
		fi
	fi
	exit 0
fi

usage() {
	# editorconfig-checker-disable
	cat <<EOF
Usage: one backup [OPTIONS]
Desc:  Output backup scripts for current enabled modules
Options:
  -h, --help           Show usage
  -o, --output <PATH>  Output the content to file.
EOF
	# editorconfig-checker-enable
}

# one.bash:usage
if [[ ${1:-} == -h ]] || [[ ${1:-} == --help ]]; then
	usage
	exit 0
fi

if [[ -z ${ONE_DIR:-} ]]; then
	ONE_DIR=$(realpath "$0")
	ONE_DIR=${ONE_DIR%/*}
	ONE_DIR=${ONE_DIR%/*}
	declare -rx ONE_DIR
fi

# shellcheck source=./base-scripts.bash
. "$ONE_DIR/one-cmds/base-scripts.bash"

# shellcheck source=../one-cmds/mod.bash
. "$ONE_DIR/one-cmds/mod.bash"

list_enabled_mod_for_backup() {
	local path filename
	for path in "$ONE_DIR"/enabled/*---*"@$1.bash"; do
		filename=${path##*---}

		if [[ $filename =~ ^([^@]+)@([^@]+)@([^@]+).bash$ ]]; then
			mod_name=${BASH_REMATCH[1]}
			repo_name=${BASH_REMATCH[2]}
			mod_type=${BASH_REMATCH[3]}
			echo "one $mod_type enable -r $repo_name $mod_name"
		fi
	done
	printf '\n'
}

list_enabled_bin_for_backup() {
	local mod_type=$1
	local target repo_name mod_name

	for path in "$ONE_DIR/enabled/$mod_type"/*; do
		if [[ ! -L $path ]]; then continue; fi
		target=$(readlink "$path")
		mod_name=${path##*/}

		if [[ $target =~ ^../../enabled/repo/([^/]+)/$mod_type/ ]]; then
			repo_name=${BASH_REMATCH[1]}
			echo "one $mod_type enable -r $repo_name $mod_name"
		elif [[ $target =~ ^../../data/$mod_type/$mod_name/ ]]; then
			if [[ -f "$ONE_DIR"/data/$mod_type/$mod_name/meta.bash ]]; then
				(
					# shellcheck disable=SC1090
					. "$ONE_DIR/data/$mod_type/$mod_name/meta.bash"
					echo "one $mod_type enable -r $repo_name $mod_name"
				)
			fi
		fi
	done

	printf '\n'
}

list_enabled_subs() {
	find "$ONE_DIR/enabled/sub" -maxdepth 1 -type l -exec basename {} \; |
		sort | tr '\n' ' '
	printf '\n'
}

backup_content() {
	cat <<EOF
#!/usr/bin/env bash
# Description: invoke this scripts to restore your backups of one.bash.

set -o errexit -o nounset -o pipefail -o errtrace
(shopt -p inherit_errexit &>/dev/null) && shopt -s inherit_errexit

one a disable --all
one b disable --all
one c disable --all
one d disable --all
one p disable --all

EOF

	local path url
	shopt -s nullglob

	for path in "$ONE_DIR"/enabled/repo/*; do
		if [[ -d $path/.git ]]; then
			url=$(git -C "$path" config --get remote.origin.url)
		else
			url=$(realpath "$path")
		fi
		echo "one repo add $url"
	done

	printf '\n'
	list_enabled_mod_for_backup plugin # Must enable plugin first
	list_enabled_mod_for_backup alias
	list_enabled_mod_for_backup completion
	list_enabled_bin_for_backup bin
	list_enabled_bin_for_backup sub
	printf 'echo "[All Done]"\n'
}

declare -A opts=()
declare -a args=()
declare -A opts_def=(
	[opts]=opts
	[args]=args
	['-o --output']='default:/dev/stdout'
)
l.parse_args opts_def "$@"

main() {
	dist="${opts[o]}"

	if [[ $dist == /dev/stdout ]]; then
		backup_content
	elif [[ $dist == /dev/stderr ]]; then
		backup_content >&2
	else
		backup_content | tee "$dist"
		chmod +x "$dist"
		print_success "Created backup file: $dist"
	fi
}
main
