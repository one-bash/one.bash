#!/usr/bin/env bash

set -o errexit -o nounset -o pipefail -o errtrace
(shopt -p inherit_errexit &>/dev/null) && shopt -s inherit_errexit

# one.bash:completion
if [[ ${1:-} == --complete ]]; then
	if ((COMP_CWORD < 3)); then
		result=$(compgen -f -- "$2")
		if [[ -d $result ]]; then
			compgen -f -- "$result/"
		else
			echo "${result[@]}"
		fi
	fi
	exit 0
fi

# one.bash:usage
if [[ ${1:-} == -h ]] || [[ ${1:-} == --help ]]; then
	cat <<EOF
Usage: one $(basename "$0") [<LINKS_CONF>]

Desc: Remove all symbol links based on LINKS_CONF file

Arguments:
  <LINKS_CONF>  The filepath of one.links.yaml. If omit, use the value of ONE_LINKS_CONF defined in ONE_CONF.
EOF
	exit 0
fi

if [[ -z ${ONE_DIR:-} ]]; then
	SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
	readonly SCRIPT_DIR
	ONE_DIR=$SCRIPT_DIR/..
fi

# shellcheck source=./base-scripts.bash
. "$ONE_DIR/one-cmds/base-scripts.bash"

run() {
	local DOTBOT_CONF=$1

	if [[ ! -f $DOTBOT_CONF ]]; then
		print_err "Not found file '$DOTBOT_CONF'. Check the value of ONE_LINKS_CONF in your config."
		exit $ONE_EX_CONFIG
	fi

	print_verb "Remove symbol links based on  ONE_LINKS_CONF: ${DOTBOT_CONF}"

	python3 "$ONE_DIR"/one-cmds/unlink.py "$DOTBOT_CONF"
}

if (($# > 0)); then
	run "$1"
else
	# shellcheck source=../bash/load-config.bash
	. "$ONE_DIR/bash/load-config.bash"
	export ONE_DIR ONE_SUB ONE_CONF

	# shellcheck source=../one.config.default.bash
	. "$ONE_CONF"

	if l.is_function ONE_LINKS_CONF; then
		array=()
		for path in $(ONE_LINKS_CONF "$(uname -s)" "$(uname -m)"); do
			array+=("$path")
		done

		for ((idx = ${#array[@]} - 1; idx >= 0; idx--)); do
			run "${array[idx]}"
		done
	elif l.is_array ONE_LINKS_CONF; then
		for ((idx = ${#ONE_LINKS_CONF[@]} - 1; idx >= 0; idx--)); do
			run "${ONE_LINKS_CONF[idx]}"
		done
	else
		run "$ONE_LINKS_CONF"
	fi
fi
