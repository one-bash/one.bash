#!/usr/bin/env bash

set -o errexit -o nounset -o pipefail -o errtrace
(shopt -p inherit_errexit &>/dev/null) && shopt -s inherit_errexit

# one.bash:usage:-h
if (($# == 0)) || [[ $1 == -h ]] || [[ $1 == --help ]]; then
	# editorconfig-checker-disable
	cat <<EOF
Usage: one help [<CMD>]
       one help -a

Desc:
  Print the usage of One Command.
  Enter "one" to see all command usages.

Arguments:
  <CMD>  The sub command of one

Options:
  -a, --all     If set, print all command usages.
EOF
	exit 0
	# editorconfig-checker-enable
fi

if [[ -z ${ONE_DIR:-} ]]; then
	ONE_DIR=$(realpath "$0")
	ONE_DIR=${ONE_DIR%/*}
	ONE_DIR=${ONE_DIR%/*}
	declare -rx ONE_DIR
fi

# one.bash:completion
if [[ $1 == '--complete' ]]; then
	if (($# == 2)); then
		for path in "$ONE_DIR"/one-cmds/*; do
			if [[ -x $path/main ]] || [[ -x $path ]]; then
				echo "${path##"$ONE_DIR/one-cmds/"}"
			fi
		done
	fi
	exit 0
fi

print_help() {
	local cmd="$1"
	local file="$ONE_DIR/one-cmds/$cmd"
	local label arg

	if [[ -f $ONE_DIR/one-cmds/$cmd/main ]]; then
		file="$ONE_DIR/one-cmds/$cmd/main"
	fi

	if [[ ! -x $file ]]; then
		print_warn "Not found command '$cmd'"
		return "$ONE_EX_USAGE"
	fi

	label=$(grep -i '^# one.bash:usage' "$file" 2>/dev/null || true)

	if [[ -z $label ]]; then
		print_warn "The command '$cmd' has not usage document."
		return "$ONE_EX_UNAVAILABLE"
	fi

	arg=$(sed -E 's/^# one.bash:usage(:?.*)/\1/i' <<<"$label" || true)

	if [[ -z ${arg#:} ]]; then
		arg='--help'
	else
		arg=${arg#:}
	fi

	"$file" "$arg"
}

main() {
	# shellcheck source=./base-scripts.bash
	. "$ONE_DIR/one-cmds/base-scripts.bash"

	if [[ $1 == -a ]] || [[ $1 == --all ]]; then
		one -h
	else
		print_help "$1"
	fi
}

main "$@"
