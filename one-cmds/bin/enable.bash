usage() {
	# editorconfig-checker-disable
	cat <<EOF
Usage: one $t enable [OPTIONS] <NAME>...
Desc:  Enable matched $t files
Arguments:
  <NAME>              $t name
Options:
  -a, --all           Enable all $t files
	-r <repo>           Enable $t files in the repo
EOF
	# editorconfig-checker-enable
}

# TODO FIX the bin file should be executable. [[ -x $path ]]
. "$ONE_DIR/one-cmds/plugin/action-completion.bash"

create_exports() {
	if [[ ! -v EXPORTS ]]; then
		return
	fi

	local name=$1

	local bin_name
	for bin_name in "${EXPORTS[@]}"; do
		if [[ -f "$ONE_DIR/data/$t/$name/$bin_name" ]]; then
			# for GITHUB_RELEASE_FILES
			chmod +x "$ONE_DIR/data/$t/$name/$bin_name"
			create_bin_symlink "$bin_name" "$t" "$ONE_DIR/data/$t/$name/$bin_name"
		elif [[ -f "$ONE_DIR/data/$t/$name/git/$bin_name" ]]; then
			# for GIT_REPO
			chmod +x "$ONE_DIR/data/$t/$name/git/$bin_name"
			create_bin_symlink "$bin_name" "$t" "$ONE_DIR/data/$t/$name/git/$bin_name"
		else
			print_err "Not found file \"$bin_name\" to export. Please report bug to module maintainer."
		fi
	done
}

# NOTE: DO NOT modify the value of mod_annotation
readonly mod_annotation='# This file is generated by one.bash. Do not modify the file content.'

cretea_mod_meta() {
	local mod_name=$1
	local opt_path=$2
	local MOD_META="$ONE_DIR/data/$t/$mod_name/meta.bash"
	local repo_name
	repo_name=$(get_enabled_repo_name "$opt_path")

	{
		echo "$mod_annotation"
		echo "repo_name=$repo_name"
	} >"$MOD_META"
}

enable() {
	local path=$1
	local name=$2

	if [[ -x $path ]]; then
		mod_check_dep_cmds "$path"
		create_bin_symlink "$name" "$t" "$path"
	elif [[ $path == *.opt.bash ]]; then
		mod_check_dep_cmds "$path"
		# Disable first, prevent duplicated module enabled with different priority
		disable_mod "$name"
		download_mod_data "$name" "$path"
		cretea_mod_meta "$name" "$path"

		local SCRIPT exports bin_name

		# shellcheck disable=1090
		SCRIPT=$(. "$path" && echo "${SCRIPT:-}")
		if [[ -n $SCRIPT ]]; then
			local script_file=$ONE_DIR/data/$t/$name/script.bash
			if [[ ! -f $script_file ]]; then
				print_err "The script file not exist: $script_file"
				return 4
			fi

			chmod +x "$script_file"

			# shellcheck disable=1090
			read -ra exports < <(. "$path" && echo "${EXPORTS[@]}")
			for bin_name in "${exports[@]}"; do
				create_bin_symlink "$bin_name" "$t" "$script_file"
			done
		else
			(
				# shellcheck disable=1090
				. "$path"
				create_exports "$name"
			)
		fi
	else
		print_err "The file is not executable: $path"
		return "$ONE_EX_DATAERR"
	fi
}

declare -A opts=()
declare -a args=()
# shellcheck disable=2034
declare -A opts_def=(
	['-a --all']='bool'
)

main() {
	if ((${#args[*]} == 0)); then
		usage
		return "$ONE_EX_OK"
	fi

	shopt -s nullglob
	local name path filepaths

	. "$ONE_DIR/one-cmds/mod.bash"
	. "$ONE_DIR/bash/load-config.bash"
	. "$ONE_DIR/bash/log.bash"

	local repo=${opts[r]:-}

	if [[ ${opts[a]} == true ]]; then
		if [[ -z $repo ]]; then
			for path in "${ONE_DIR}"/enabled/repo/*/"$t"/*; do
				name=${path##*/}
				name=${name%.opt.bash}
				name=${name%.bash}
				name="${name%.sh}"
				enable "$path" "$name"
			done
		else
			for path in "${ONE_DIR}/enabled/repo/$repo/$t/"*; do
				name=${path##*/}
				name=${name%.opt.bash}
				name=${name%.bash}
				name="${name%.sh}"
				enable "$path" "$name"
			done
		fi
	else
		for name in "${args[@]}"; do
			filepaths=()

			if [[ -z $repo ]]; then
				for path in "${ONE_DIR}"/enabled/repo/*/"$t/$name"{,.bash,.sh,.opt.bash}; do
					filepaths+=("$path")
				done
			else
				for path in "${ONE_DIR}/enabled/repo/$repo/$t/$name"{,.bash,.sh,.opt.bash}; do
					if [[ -f "$path" ]]; then
						filepaths+=("$path")
					fi
				done
			fi

			case ${#filepaths[@]} in
				1)
					enable "${filepaths[0]}" "$name"
					;;

				0)
					print_err "No matched $t '$name'"
					return "$ONE_EX_DATAERR"
					;;

				*)
					print_err "Matched multi $t for '$name'. You should use '-r' option for specified repo:"
					local repo
					for filepath in "${filepaths[@]}"; do
						repo=$(get_enabled_repo_name "$filepath")
						echo "   one $t enable $name -r $repo" >&2
					done
					return "$ONE_EX_USAGE"

					;;
			esac
		done
	fi
}
